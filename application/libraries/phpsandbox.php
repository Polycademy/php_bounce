<?php defined('BASEPATH') OR exit('No direct script access allowed');/*** Sandbox environment for evaluating php*/class PHPsandbox{	//options for phpsandbox	protected $_options = array(		'chroot' => '/',		'display_errors' => 'on', //change to stderr to see what will happen		'auto_prepend_file' => false,		'max_execution_time' => 1, //reduce on execution		'memory_limit' => '2M', //reduce on memory allowed		'upload_max_filesize' => '0M',		'file_uploads'	=> '0'		'disable_functions' => 'apache_child_terminate,apache_setenv,assert_options,chdir,chgrp,chmod,chown,closedir,copy,dbase_open,define_syslog_variables, dl,escapeshellarg,escapeshellcmd, exec,curl_exec,curl_multi_exec,curl_multi_init,curl_init,parse_ini_file,show_source,pcntl_fork,pcntl_exec,phpinfo,ini_set,include,require,include_once,require_once,file,file_exists,file_get_contents,finfo_file,finfo_open,fopen,fp,fpassthru,fput,fputcsv,fputs,fread,ftp_connect,ftp_exec,ftp_get,ftp_login,ftp_nb_fput,ftp_put,ftp_raw,ftp_rawlist,ftruncate,fwrite,getcwd,getopt,header,highlight_file,ini_alter,ini_get,ini_get_all,ini_restore,link,mail,mkdir,move_uploaded_file,mysql_connect,mysql_pconnect,mysqli_connect,opendir,openlog,passthru,pathinfo,php_uname,phpversion,popen,posix_getpwuid,posix_kill,posix_mkfifo,posix_setpgid,posix_setsid,posix_setuid,posix_uname,proc_close,proc_get_status,proc_nice,proc_open,proc_terminate,putenv,readdir,readfile,readlink,rename,restore_include_path,rewinddir,rmdir,scandir,session_start,set_include_path,set_magic_quotes_runtime,set_time_limit,shell_exec,symlink,assert,create_function,file_put_contents,sys_get_temp_dir,syslog,system,tempnam,tmpfile,unlink,xmlrpc_entity_decode,zend_version,imap_mail,imap_open',		'directory_protection' => true,	);	//cli options built as a string to pass into cli	protected $_cli_options;	//path to binary	protected $_php_binary = 'php';	//how long script took	protected $_run_start_time = 0;	protected $_run_end_time = 0;	//CI super object	protected $_CI;	//operating system	protected $_operating_system;	//code to be run	protected $_code;		/**	 * 	 * PHP Sandbox construct	 * 	 * @param array $options	 */	public function __construct(){			$this->_CI =& get_instance();		//initiate the binary (auto)		$this->init_binary(false);		//determine path to environmental variables (auto)		$this->init_env(false);		//build the cli option into a string		$this->_cli_options = $this->_build_cli_options;			}		//initiate custom options to be passed to CLI	//merges it so, will replace only some of the variables	public function init_options($options = array()){		$this->_options = array_merge($this->_options, $options);	}		//for the cli environment	//should be phpsandbox_prepend_helper	public function init_env($file_name){			//APPPATH => path/to/application/ for CI		//if no helper, then just move on with no environmental variables		if(!empty($file_name)){					$prepend_file = APPPATH . 'helpers' . DIRECTORY_SEPARATOR . $file_name . '.php';						if(file_exists($prepend_file){							$this->_options['auto_prepend_file'] = $prepend_file;				return true;						}				}				return false;		}		public function init_binary($php_binary = false){			if(stripos(PHP_OS, 'win') !== false){			$this->_operating_system = 'WIN';		}else{			$this->_operating_system = 'UNIX';		}			if (!empty($php_binary) && (!file_exists($php_binary) || !is_executable($php_binary))) {			show_error('Specified PHP binary in PHPSandbox is not valid. Check if it is the right path.', 500);		}				$this->_php_binary = $php_binary ? $php_binary : $this->_find_binary();		}		private function _find_binary() {				if ($this->_operating_system == 'WIN') {			return 'c:\wamp\bin\php\php5.3.0\php.exe';		}else{					//this will work on unix computers			$php_binary = trim(shell_exec('which php'));						if(!empty($php_binary)){				return $php_binary;			}else{				show_error('PHPSandbox cannot find PHP Binary... sorry.', 500);			}					}			}		//this should include directory protection such as open_basedir and chroot	private function _build_cli_options(){		}}